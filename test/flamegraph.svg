<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="333753853"><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.15%)</title><rect x="0.0000%" y="805" width="0.1503%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="501504"/><text x="0.2500%" y="815.50"></text></g><g><title>asm_exc_page_fault (501,504 samples, 0.15%)</title><rect x="0.0000%" y="789" width="0.1503%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="501504"/><text x="0.2500%" y="799.50"></text></g><g><title>exc_page_fault (501,504 samples, 0.15%)</title><rect x="0.0000%" y="773" width="0.1503%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="501504"/><text x="0.2500%" y="783.50"></text></g><g><title>do_user_addr_fault (501,504 samples, 0.15%)</title><rect x="0.0000%" y="757" width="0.1503%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="501504"/><text x="0.2500%" y="767.50"></text></g><g><title>handle_mm_fault (501,504 samples, 0.15%)</title><rect x="0.0000%" y="741" width="0.1503%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="501504"/><text x="0.2500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,008 samples, 0.30%)</title><rect x="0.0000%" y="885" width="0.3005%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003008"/><text x="0.2500%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,008 samples, 0.30%)</title><rect x="0.0000%" y="869" width="0.3005%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003008"/><text x="0.2500%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,008 samples, 0.30%)</title><rect x="0.0000%" y="853" width="0.3005%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003008"/><text x="0.2500%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,008 samples, 0.30%)</title><rect x="0.0000%" y="837" width="0.3005%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1003008"/><text x="0.2500%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,003,008 samples, 0.30%)</title><rect x="0.0000%" y="821" width="0.3005%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1003008"/><text x="0.2500%" y="831.50"></text></g><g><title>_dl_catch_exception (501,504 samples, 0.15%)</title><rect x="0.1503%" y="805" width="0.1503%" height="15" fill="rgb(250,228,42)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.15%)</title><rect x="0.1503%" y="789" width="0.1503%" height="15" fill="rgb(240,193,28)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.15%)</title><rect x="0.1503%" y="773" width="0.1503%" height="15" fill="rgb(216,20,37)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.15%)</title><rect x="0.1503%" y="757" width="0.1503%" height="15" fill="rgb(206,188,39)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (501,504 samples, 0.15%)</title><rect x="0.1503%" y="741" width="0.1503%" height="15" fill="rgb(217,207,13)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (501,504 samples, 0.15%)</title><rect x="0.1503%" y="725" width="0.1503%" height="15" fill="rgb(231,73,38)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="735.50"></text></g><g><title>do_syscall_64 (501,504 samples, 0.15%)</title><rect x="0.1503%" y="709" width="0.1503%" height="15" fill="rgb(225,20,46)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="719.50"></text></g><g><title>__x64_sys_openat (501,504 samples, 0.15%)</title><rect x="0.1503%" y="693" width="0.1503%" height="15" fill="rgb(210,31,41)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="703.50"></text></g><g><title>do_sys_openat2 (501,504 samples, 0.15%)</title><rect x="0.1503%" y="677" width="0.1503%" height="15" fill="rgb(221,200,47)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="687.50"></text></g><g><title>getname_flags.part.0 (501,504 samples, 0.15%)</title><rect x="0.1503%" y="661" width="0.1503%" height="15" fill="rgb(226,26,5)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="671.50"></text></g><g><title>kmem_cache_alloc_noprof (501,504 samples, 0.15%)</title><rect x="0.1503%" y="645" width="0.1503%" height="15" fill="rgb(249,33,26)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="655.50"></text></g><g><title>memset_orig (501,504 samples, 0.15%)</title><rect x="0.1503%" y="629" width="0.1503%" height="15" fill="rgb(235,183,28)" fg:x="501504" fg:w="501504"/><text x="0.4003%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (935,419 samples, 0.28%)</title><rect x="0.3005%" y="613" width="0.2803%" height="15" fill="rgb(221,5,38)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (935,419 samples, 0.28%)</title><rect x="0.3005%" y="597" width="0.2803%" height="15" fill="rgb(247,18,42)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (935,419 samples, 0.28%)</title><rect x="0.3005%" y="581" width="0.2803%" height="15" fill="rgb(241,131,45)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (935,419 samples, 0.28%)</title><rect x="0.3005%" y="565" width="0.2803%" height="15" fill="rgb(249,31,29)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (935,419 samples, 0.28%)</title><rect x="0.3005%" y="549" width="0.2803%" height="15" fill="rgb(225,111,53)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (935,419 samples, 0.28%)</title><rect x="0.3005%" y="533" width="0.2803%" height="15" fill="rgb(238,160,17)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (935,419 samples, 0.28%)</title><rect x="0.3005%" y="517" width="0.2803%" height="15" fill="rgb(214,148,48)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="527.50"></text></g><g><title>cfree (935,419 samples, 0.28%)</title><rect x="0.3005%" y="501" width="0.2803%" height="15" fill="rgb(232,36,49)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="511.50"></text></g><g><title>__munmap (935,419 samples, 0.28%)</title><rect x="0.3005%" y="485" width="0.2803%" height="15" fill="rgb(209,103,24)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (935,419 samples, 0.28%)</title><rect x="0.3005%" y="469" width="0.2803%" height="15" fill="rgb(229,88,8)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="479.50"></text></g><g><title>do_syscall_64 (935,419 samples, 0.28%)</title><rect x="0.3005%" y="453" width="0.2803%" height="15" fill="rgb(213,181,19)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="463.50"></text></g><g><title>__x64_sys_munmap (935,419 samples, 0.28%)</title><rect x="0.3005%" y="437" width="0.2803%" height="15" fill="rgb(254,191,54)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="447.50"></text></g><g><title>__vm_munmap (935,419 samples, 0.28%)</title><rect x="0.3005%" y="421" width="0.2803%" height="15" fill="rgb(241,83,37)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="431.50"></text></g><g><title>do_vmi_munmap (935,419 samples, 0.28%)</title><rect x="0.3005%" y="405" width="0.2803%" height="15" fill="rgb(233,36,39)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="415.50"></text></g><g><title>do_vmi_align_munmap (935,419 samples, 0.28%)</title><rect x="0.3005%" y="389" width="0.2803%" height="15" fill="rgb(226,3,54)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="399.50"></text></g><g><title>vms_complete_munmap_vmas (935,419 samples, 0.28%)</title><rect x="0.3005%" y="373" width="0.2803%" height="15" fill="rgb(245,192,40)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="383.50"></text></g><g><title>vms_clear_ptes (935,419 samples, 0.28%)</title><rect x="0.3005%" y="357" width="0.2803%" height="15" fill="rgb(238,167,29)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="367.50"></text></g><g><title>unmap_vmas (935,419 samples, 0.28%)</title><rect x="0.3005%" y="341" width="0.2803%" height="15" fill="rgb(232,182,51)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="351.50"></text></g><g><title>unmap_page_range (935,419 samples, 0.28%)</title><rect x="0.3005%" y="325" width="0.2803%" height="15" fill="rgb(231,60,39)" fg:x="1003008" fg:w="935419"/><text x="0.5505%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string::_{{closure}} (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="565" width="2.7959%" height="15" fill="rgb(208,69,12)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="575.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="549" width="2.7959%" height="15" fill="rgb(235,93,37)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="559.50">&lt;s..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="533" width="2.7959%" height="15" fill="rgb(213,116,39)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="543.50">&lt;s..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="517" width="2.7959%" height="15" fill="rgb(222,207,29)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="527.50">&lt;&amp;..</text></g><g><title>std::io::default_read_to_end (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="501" width="2.7959%" height="15" fill="rgb(206,96,30)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="511.50">st..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="485" width="2.7959%" height="15" fill="rgb(218,138,4)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="495.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="469" width="2.7959%" height="15" fill="rgb(250,191,14)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="479.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="453" width="2.7959%" height="15" fill="rgb(239,60,40)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="463.50">st..</text></g><g><title>read (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="437" width="2.7959%" height="15" fill="rgb(206,27,48)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="447.50">re..</text></g><g><title>[libc.so.6] (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="421" width="2.7959%" height="15" fill="rgb(225,35,8)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="431.50">[l..</text></g><g><title>[libc.so.6] (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="405" width="2.7959%" height="15" fill="rgb(250,213,24)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="415.50">[l..</text></g><g><title>entry_SYSCALL_64 (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="389" width="2.7959%" height="15" fill="rgb(247,123,22)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="399.50">en..</text></g><g><title>do_syscall_64 (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="373" width="2.7959%" height="15" fill="rgb(231,138,38)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="383.50">do..</text></g><g><title>ksys_read (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="357" width="2.7959%" height="15" fill="rgb(231,145,46)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="367.50">ks..</text></g><g><title>vfs_read (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="341" width="2.7959%" height="15" fill="rgb(251,118,11)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="351.50">vf..</text></g><g><title>filemap_read (9,331,334 samples, 2.80%)</title><rect x="0.5808%" y="325" width="2.7959%" height="15" fill="rgb(217,147,25)" fg:x="1938427" fg:w="9331334"/><text x="0.8308%" y="335.50">fi..</text></g><g><title>copy_page_to_iter (7,344,469 samples, 2.20%)</title><rect x="1.1761%" y="309" width="2.2006%" height="15" fill="rgb(247,81,37)" fg:x="3925292" fg:w="7344469"/><text x="1.4261%" y="319.50">c..</text></g><g><title>_copy_to_iter (7,344,469 samples, 2.20%)</title><rect x="1.1761%" y="293" width="2.2006%" height="15" fill="rgb(209,12,38)" fg:x="3925292" fg:w="7344469"/><text x="1.4261%" y="303.50">_..</text></g><g><title>asm_exc_page_fault (5,626,898 samples, 1.69%)</title><rect x="1.6907%" y="277" width="1.6859%" height="15" fill="rgb(227,1,9)" fg:x="5642863" fg:w="5626898"/><text x="1.9407%" y="287.50"></text></g><g><title>exc_page_fault (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="261" width="1.0358%" height="15" fill="rgb(248,47,43)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="271.50"></text></g><g><title>do_user_addr_fault (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="245" width="1.0358%" height="15" fill="rgb(221,10,30)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="255.50"></text></g><g><title>handle_mm_fault (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="229" width="1.0358%" height="15" fill="rgb(210,229,1)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="239.50"></text></g><g><title>__handle_mm_fault (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="213" width="1.0358%" height="15" fill="rgb(222,148,37)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="223.50"></text></g><g><title>do_huge_pmd_anonymous_page (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="197" width="1.0358%" height="15" fill="rgb(234,67,33)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="207.50"></text></g><g><title>vma_alloc_anon_folio_pmd (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="181" width="1.0358%" height="15" fill="rgb(247,98,35)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="191.50"></text></g><g><title>vma_alloc_folio_noprof (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="165" width="1.0358%" height="15" fill="rgb(247,138,52)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="175.50"></text></g><g><title>folio_alloc_mpol_noprof (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="149" width="1.0358%" height="15" fill="rgb(213,79,30)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="159.50"></text></g><g><title>alloc_pages_mpol_noprof (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="133" width="1.0358%" height="15" fill="rgb(246,177,23)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="143.50"></text></g><g><title>__alloc_pages_noprof (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="117" width="1.0358%" height="15" fill="rgb(230,62,27)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="127.50"></text></g><g><title>get_page_from_freelist (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="101" width="1.0358%" height="15" fill="rgb(216,154,8)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="111.50"></text></g><g><title>prep_new_page (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="85" width="1.0358%" height="15" fill="rgb(244,35,45)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="95.50"></text></g><g><title>clear_page_erms (3,457,152 samples, 1.04%)</title><rect x="2.3408%" y="69" width="1.0358%" height="15" fill="rgb(251,115,12)" fg:x="7812609" fg:w="3457152"/><text x="2.5908%" y="79.50"></text></g><g><title>rat::read_file (11,560,997 samples, 3.46%)</title><rect x="0.5808%" y="613" width="3.4639%" height="15" fill="rgb(240,54,50)" fg:x="1938427" fg:w="11560997"/><text x="0.8308%" y="623.50">rat..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string (11,560,997 samples, 3.46%)</title><rect x="0.5808%" y="597" width="3.4639%" height="15" fill="rgb(233,84,52)" fg:x="1938427" fg:w="11560997"/><text x="0.8308%" y="607.50">&lt;st..</text></g><g><title>std::io::append_to_string (11,560,997 samples, 3.46%)</title><rect x="0.5808%" y="581" width="3.4639%" height="15" fill="rgb(207,117,47)" fg:x="1938427" fg:w="11560997"/><text x="0.8308%" y="591.50">std..</text></g><g><title>core::str::converts::from_utf8 (2,229,663 samples, 0.67%)</title><rect x="3.3767%" y="565" width="0.6681%" height="15" fill="rgb(249,43,39)" fg:x="11269761" fg:w="2229663"/><text x="3.6267%" y="575.50"></text></g><g><title>core::str::validations::run_utf8_validation (2,229,663 samples, 0.67%)</title><rect x="3.3767%" y="549" width="0.6681%" height="15" fill="rgb(209,38,44)" fg:x="11269761" fg:w="2229663"/><text x="3.6267%" y="559.50"></text></g><g><title>_copy_from_iter (4,539,946 samples, 1.36%)</title><rect x="4.2754%" y="245" width="1.3603%" height="15" fill="rgb(236,212,23)" fg:x="14269338" fg:w="4539946"/><text x="4.5254%" y="255.50"></text></g><g><title>_raw_spin_unlock_irqrestore (2,242,733 samples, 0.67%)</title><rect x="28.7812%" y="229" width="0.6720%" height="15" fill="rgb(242,79,21)" fg:x="96058405" fg:w="2242733"/><text x="29.0312%" y="239.50"></text></g><g><title>asm_common_interrupt (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="229" width="0.3737%" height="15" fill="rgb(211,96,35)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="239.50"></text></g><g><title>common_interrupt (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="213" width="0.3737%" height="15" fill="rgb(253,215,40)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="223.50"></text></g><g><title>__common_interrupt (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="197" width="0.3737%" height="15" fill="rgb(211,81,21)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="207.50"></text></g><g><title>handle_edge_irq (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="181" width="0.3737%" height="15" fill="rgb(208,190,38)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="191.50"></text></g><g><title>handle_irq_event (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="165" width="0.3737%" height="15" fill="rgb(235,213,38)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="175.50"></text></g><g><title>__handle_irq_event_percpu (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="149" width="0.3737%" height="15" fill="rgb(237,122,38)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="159.50"></text></g><g><title>[[i915]] (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="133" width="0.3737%" height="15" fill="rgb(244,218,35)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="143.50"></text></g><g><title>[[i915]] (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="117" width="0.3737%" height="15" fill="rgb(240,68,47)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="127.50"></text></g><g><title>[[i915]] (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="101" width="0.3737%" height="15" fill="rgb(210,16,53)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="111.50"></text></g><g><title>drm_handle_vblank (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="85" width="0.3737%" height="15" fill="rgb(235,124,12)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="95.50"></text></g><g><title>__wake_up (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="69" width="0.3737%" height="15" fill="rgb(224,169,11)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="79.50"></text></g><g><title>__wake_up_common (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="53" width="0.3737%" height="15" fill="rgb(250,166,2)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="63.50"></text></g><g><title>[[i915]] (1,247,083 samples, 0.37%)</title><rect x="29.4532%" y="37" width="0.3737%" height="15" fill="rgb(242,216,29)" fg:x="98301138" fg:w="1247083"/><text x="29.7032%" y="47.50"></text></g><g><title>__tty_buffer_request_room (753,835 samples, 0.23%)</title><rect x="31.5539%" y="165" width="0.2259%" height="15" fill="rgb(230,116,27)" fg:x="105312401" fg:w="753835"/><text x="31.8039%" y="175.50"></text></g><g><title>__tty_insert_flip_string_flags (1,331,198 samples, 0.40%)</title><rect x="31.5539%" y="181" width="0.3989%" height="15" fill="rgb(228,99,48)" fg:x="105312401" fg:w="1331198"/><text x="31.8039%" y="191.50"></text></g><g><title>memcpy (577,363 samples, 0.17%)</title><rect x="31.7798%" y="165" width="0.1730%" height="15" fill="rgb(253,11,6)" fg:x="106066236" fg:w="577363"/><text x="32.0298%" y="175.50"></text></g><g><title>_raw_spin_lock_irqsave (5,427,054 samples, 1.63%)</title><rect x="31.9528%" y="181" width="1.6261%" height="15" fill="rgb(247,143,39)" fg:x="106643599" fg:w="5427054"/><text x="32.2028%" y="191.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1,018,476 samples, 0.31%)</title><rect x="33.5788%" y="181" width="0.3052%" height="15" fill="rgb(236,97,10)" fg:x="112070653" fg:w="1018476"/><text x="33.8288%" y="191.50"></text></g><g><title>__queue_work (501,504 samples, 0.15%)</title><rect x="38.6271%" y="165" width="0.1503%" height="15" fill="rgb(233,208,19)" fg:x="128919299" fg:w="501504"/><text x="38.8771%" y="175.50"></text></g><g><title>__radix_tree_lookup (5,634,203 samples, 1.69%)</title><rect x="38.7773%" y="149" width="1.6881%" height="15" fill="rgb(216,164,2)" fg:x="129420803" fg:w="5634203"/><text x="39.0273%" y="159.50"></text></g><g><title>__task_rq_lock (463,771 samples, 0.14%)</title><rect x="40.7123%" y="117" width="0.1390%" height="15" fill="rgb(220,129,5)" fg:x="135878835" fg:w="463771"/><text x="40.9623%" y="127.50"></text></g><g><title>raw_spin_rq_lock_nested (463,771 samples, 0.14%)</title><rect x="40.7123%" y="101" width="0.1390%" height="15" fill="rgb(242,17,10)" fg:x="135878835" fg:w="463771"/><text x="40.9623%" y="111.50"></text></g><g><title>_raw_spin_lock (463,771 samples, 0.14%)</title><rect x="40.7123%" y="85" width="0.1390%" height="15" fill="rgb(242,107,0)" fg:x="135878835" fg:w="463771"/><text x="40.9623%" y="95.50"></text></g><g><title>native_queued_spin_lock_slowpath (463,771 samples, 0.14%)</title><rect x="40.7123%" y="69" width="0.1390%" height="15" fill="rgb(251,28,31)" fg:x="135878835" fg:w="463771"/><text x="40.9623%" y="79.50"></text></g><g><title>_raw_spin_lock_irqsave (2,305,362 samples, 0.69%)</title><rect x="40.8512%" y="117" width="0.6907%" height="15" fill="rgb(233,223,10)" fg:x="136342606" fg:w="2305362"/><text x="41.1012%" y="127.50"></text></g><g><title>kick_pool (4,250,766 samples, 1.27%)</title><rect x="40.4655%" y="149" width="1.2736%" height="15" fill="rgb(215,21,27)" fg:x="135055006" fg:w="4250766"/><text x="40.7155%" y="159.50"></text></g><g><title>try_to_wake_up (3,426,937 samples, 1.03%)</title><rect x="40.7123%" y="133" width="1.0268%" height="15" fill="rgb(232,23,21)" fg:x="135878835" fg:w="3426937"/><text x="40.9623%" y="143.50"></text></g><g><title>ttwu_queue_wakelist (657,804 samples, 0.20%)</title><rect x="41.5420%" y="117" width="0.1971%" height="15" fill="rgb(244,5,23)" fg:x="138647968" fg:w="657804"/><text x="41.7920%" y="127.50"></text></g><g><title>__queue_work.part.0 (12,141,477 samples, 3.64%)</title><rect x="38.7773%" y="165" width="3.6379%" height="15" fill="rgb(226,81,46)" fg:x="129420803" fg:w="12141477"/><text x="39.0273%" y="175.50">__qu..</text></g><g><title>pwq_tryinc_nr_active (2,256,508 samples, 0.68%)</title><rect x="41.7391%" y="149" width="0.6761%" height="15" fill="rgb(247,70,30)" fg:x="139305772" fg:w="2256508"/><text x="41.9891%" y="159.50"></text></g><g><title>do_output_char (42,937,594 samples, 12.87%)</title><rect x="29.8268%" y="229" width="12.8650%" height="15" fill="rgb(212,68,19)" fg:x="99548221" fg:w="42937594"/><text x="30.0768%" y="239.50">do_output_char</text></g><g><title>pty_write (41,968,145 samples, 12.57%)</title><rect x="30.1173%" y="213" width="12.5746%" height="15" fill="rgb(240,187,13)" fg:x="100517670" fg:w="41968145"/><text x="30.3673%" y="223.50">pty_write</text></g><g><title>tty_insert_flip_string_and_push_buffer (40,614,317 samples, 12.17%)</title><rect x="30.5229%" y="197" width="12.1689%" height="15" fill="rgb(223,113,26)" fg:x="101871498" fg:w="40614317"/><text x="30.7729%" y="207.50">tty_insert_flip_st..</text></g><g><title>queue_work_on (29,396,686 samples, 8.81%)</title><rect x="33.8840%" y="181" width="8.8079%" height="15" fill="rgb(206,192,2)" fg:x="113089129" fg:w="29396686"/><text x="34.1340%" y="191.50">queue_work_on</text></g><g><title>asm_sysvec_apic_timer_interrupt (923,535 samples, 0.28%)</title><rect x="42.4152%" y="165" width="0.2767%" height="15" fill="rgb(241,108,4)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="175.50"></text></g><g><title>sysvec_apic_timer_interrupt (923,535 samples, 0.28%)</title><rect x="42.4152%" y="149" width="0.2767%" height="15" fill="rgb(247,173,49)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="159.50"></text></g><g><title>__sysvec_apic_timer_interrupt (923,535 samples, 0.28%)</title><rect x="42.4152%" y="133" width="0.2767%" height="15" fill="rgb(224,114,35)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="143.50"></text></g><g><title>hrtimer_interrupt (923,535 samples, 0.28%)</title><rect x="42.4152%" y="117" width="0.2767%" height="15" fill="rgb(245,159,27)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="127.50"></text></g><g><title>ktime_get_update_offsets_now (923,535 samples, 0.28%)</title><rect x="42.4152%" y="101" width="0.2767%" height="15" fill="rgb(245,172,44)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="111.50"></text></g><g><title>read_tsc (923,535 samples, 0.28%)</title><rect x="42.4152%" y="85" width="0.2767%" height="15" fill="rgb(236,23,11)" fg:x="141562280" fg:w="923535"/><text x="42.6652%" y="95.50"></text></g><g><title>mutex_lock (7,295,315 samples, 2.19%)</title><rect x="42.6919%" y="229" width="2.1858%" height="15" fill="rgb(205,117,38)" fg:x="142485815" fg:w="7295315"/><text x="42.9419%" y="239.50">m..</text></g><g><title>mutex_unlock (7,855,809 samples, 2.35%)</title><rect x="44.8777%" y="229" width="2.3538%" height="15" fill="rgb(237,72,25)" fg:x="149781130" fg:w="7855809"/><text x="45.1277%" y="239.50">m..</text></g><g><title>__tty_buffer_request_room (9,742,539 samples, 2.92%)</title><rect x="51.6028%" y="181" width="2.9191%" height="15" fill="rgb(244,70,9)" fg:x="172226303" fg:w="9742539"/><text x="51.8528%" y="191.50">__..</text></g><g><title>tty_buffer_alloc (6,454,182 samples, 1.93%)</title><rect x="52.5881%" y="165" width="1.9338%" height="15" fill="rgb(217,125,39)" fg:x="175514660" fg:w="6454182"/><text x="52.8381%" y="175.50">t..</text></g><g><title>llist_del_first (2,523,528 samples, 0.76%)</title><rect x="53.7658%" y="149" width="0.7561%" height="15" fill="rgb(235,36,10)" fg:x="179445314" fg:w="2523528"/><text x="54.0158%" y="159.50"></text></g><g><title>__tty_insert_flip_string_flags (17,504,954 samples, 5.24%)</title><rect x="50.0530%" y="197" width="5.2449%" height="15" fill="rgb(251,123,47)" fg:x="167053697" fg:w="17504954"/><text x="50.3030%" y="207.50">__tty_..</text></g><g><title>memcpy (2,589,809 samples, 0.78%)</title><rect x="54.5219%" y="181" width="0.7760%" height="15" fill="rgb(221,13,13)" fg:x="181968842" fg:w="2589809"/><text x="54.7719%" y="191.50"></text></g><g><title>_raw_spin_lock_irqsave (3,403,797 samples, 1.02%)</title><rect x="55.2978%" y="197" width="1.0199%" height="15" fill="rgb(238,131,9)" fg:x="184558651" fg:w="3403797"/><text x="55.5478%" y="207.50"></text></g><g><title>__queue_work (716,193 samples, 0.21%)</title><rect x="59.7043%" y="181" width="0.2146%" height="15" fill="rgb(211,50,8)" fg:x="199265401" fg:w="716193"/><text x="59.9543%" y="191.50"></text></g><g><title>_raw_spin_lock (7,996,177 samples, 2.40%)</title><rect x="63.4224%" y="165" width="2.3958%" height="15" fill="rgb(245,182,24)" fg:x="211674669" fg:w="7996177"/><text x="63.6724%" y="175.50">_r..</text></g><g><title>native_queued_spin_lock_slowpath (1,251,973 samples, 0.38%)</title><rect x="65.4431%" y="149" width="0.3751%" height="15" fill="rgb(242,14,37)" fg:x="218418873" fg:w="1251973"/><text x="65.6931%" y="159.50"></text></g><g><title>insert_work (463,771 samples, 0.14%)</title><rect x="65.8182%" y="165" width="0.1390%" height="15" fill="rgb(246,228,12)" fg:x="219670846" fg:w="463771"/><text x="66.0682%" y="175.50"></text></g><g><title>__task_rq_lock (31,032,047 samples, 9.30%)</title><rect x="68.9960%" y="133" width="9.2979%" height="15" fill="rgb(213,55,15)" fg:x="230276857" fg:w="31032047"/><text x="69.2460%" y="143.50">__task_rq_lock</text></g><g><title>raw_spin_rq_lock_nested (28,302,380 samples, 8.48%)</title><rect x="69.8139%" y="117" width="8.4800%" height="15" fill="rgb(209,9,3)" fg:x="233006524" fg:w="28302380"/><text x="70.0639%" y="127.50">raw_spin_rq_..</text></g><g><title>_raw_spin_lock (28,302,380 samples, 8.48%)</title><rect x="69.8139%" y="101" width="8.4800%" height="15" fill="rgb(230,59,30)" fg:x="233006524" fg:w="28302380"/><text x="70.0639%" y="111.50">_raw_spin_lo..</text></g><g><title>native_queued_spin_lock_slowpath (28,302,380 samples, 8.48%)</title><rect x="69.8139%" y="85" width="8.4800%" height="15" fill="rgb(209,121,21)" fg:x="233006524" fg:w="28302380"/><text x="70.0639%" y="95.50">native_queue..</text></g><g><title>_raw_spin_lock_irqsave (10,715,481 samples, 3.21%)</title><rect x="78.2939%" y="133" width="3.2106%" height="15" fill="rgb(220,109,13)" fg:x="261308904" fg:w="10715481"/><text x="78.5439%" y="143.50">_ra..</text></g><g><title>_raw_spin_unlock_irqrestore (2,139,093 samples, 0.64%)</title><rect x="81.5045%" y="133" width="0.6409%" height="15" fill="rgb(232,18,1)" fg:x="272024385" fg:w="2139093"/><text x="81.7545%" y="143.50"></text></g><g><title>kthread_is_per_cpu (558,589 samples, 0.17%)</title><rect x="82.1454%" y="133" width="0.1674%" height="15" fill="rgb(215,41,42)" fg:x="274163478" fg:w="558589"/><text x="82.3954%" y="143.50"></text></g><g><title>select_task_rq_fair (3,454,118 samples, 1.03%)</title><rect x="82.3128%" y="133" width="1.0349%" height="15" fill="rgb(224,123,36)" fg:x="274722067" fg:w="3454118"/><text x="82.5628%" y="143.50"></text></g><g><title>available_idle_cpu (1,330,922 samples, 0.40%)</title><rect x="82.9489%" y="117" width="0.3988%" height="15" fill="rgb(240,125,3)" fg:x="276845263" fg:w="1330922"/><text x="83.1989%" y="127.50"></text></g><g><title>call_function_single_prep_ipi (1,713,302 samples, 0.51%)</title><rect x="84.2545%" y="101" width="0.5133%" height="15" fill="rgb(205,98,50)" fg:x="281202667" fg:w="1713302"/><text x="84.5045%" y="111.50"></text></g><g><title>__smp_call_single_queue (13,245,218 samples, 3.97%)</title><rect x="84.2545%" y="117" width="3.9686%" height="15" fill="rgb(205,185,37)" fg:x="281202667" fg:w="13245218"/><text x="84.5045%" y="127.50">__sm..</text></g><g><title>llist_add_batch (11,531,916 samples, 3.46%)</title><rect x="84.7679%" y="101" width="3.4552%" height="15" fill="rgb(238,207,15)" fg:x="282915969" fg:w="11531916"/><text x="85.0179%" y="111.50">lli..</text></g><g><title>__x2apic_send_IPI_dest (1,226,094 samples, 0.37%)</title><rect x="88.2231%" y="117" width="0.3674%" height="15" fill="rgb(213,199,42)" fg:x="294447885" fg:w="1226094"/><text x="88.4731%" y="127.50"></text></g><g><title>native_write_msr (1,226,094 samples, 0.37%)</title><rect x="88.2231%" y="101" width="0.3674%" height="15" fill="rgb(235,201,11)" fg:x="294447885" fg:w="1226094"/><text x="88.4731%" y="111.50"></text></g><g><title>kick_pool (76,249,566 samples, 22.85%)</title><rect x="65.9572%" y="165" width="22.8460%" height="15" fill="rgb(207,46,11)" fg:x="220134617" fg:w="76249566"/><text x="66.2072%" y="175.50">kick_pool</text></g><g><title>try_to_wake_up (75,538,030 samples, 22.63%)</title><rect x="66.1704%" y="149" width="22.6329%" height="15" fill="rgb(241,35,35)" fg:x="220846153" fg:w="75538030"/><text x="66.4204%" y="159.50">try_to_wake_up</text></g><g><title>ttwu_queue_wakelist (18,207,998 samples, 5.46%)</title><rect x="83.3477%" y="133" width="5.4555%" height="15" fill="rgb(243,32,47)" fg:x="278176185" fg:w="18207998"/><text x="83.5977%" y="143.50">ttwu_qu..</text></g><g><title>sched_clock_cpu (710,204 samples, 0.21%)</title><rect x="88.5904%" y="117" width="0.2128%" height="15" fill="rgb(247,202,23)" fg:x="295673979" fg:w="710204"/><text x="88.8404%" y="127.50"></text></g><g><title>sched_clock (710,204 samples, 0.21%)</title><rect x="88.5904%" y="101" width="0.2128%" height="15" fill="rgb(219,102,11)" fg:x="295673979" fg:w="710204"/><text x="88.8404%" y="111.50"></text></g><g><title>native_sched_clock (710,204 samples, 0.21%)</title><rect x="88.5904%" y="85" width="0.2128%" height="15" fill="rgb(243,110,44)" fg:x="295673979" fg:w="710204"/><text x="88.8404%" y="95.50"></text></g><g><title>__queue_work.part.0 (115,452,085 samples, 34.59%)</title><rect x="59.9189%" y="181" width="34.5920%" height="15" fill="rgb(222,74,54)" fg:x="199981594" fg:w="115452085"/><text x="60.1689%" y="191.50">__queue_work.part.0</text></g><g><title>pwq_tryinc_nr_active (19,049,496 samples, 5.71%)</title><rect x="88.8032%" y="165" width="5.7076%" height="15" fill="rgb(216,99,12)" fg:x="296384183" fg:w="19049496"/><text x="89.0532%" y="175.50">pwq_try..</text></g><g><title>__rcu_read_unlock (779,136 samples, 0.23%)</title><rect x="94.5109%" y="181" width="0.2334%" height="15" fill="rgb(226,22,26)" fg:x="315433679" fg:w="779136"/><text x="94.7609%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (501,504 samples, 0.15%)</title><rect x="94.7443%" y="181" width="0.1503%" height="15" fill="rgb(217,163,10)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="191.50"></text></g><g><title>sysvec_apic_timer_interrupt (501,504 samples, 0.15%)</title><rect x="94.7443%" y="165" width="0.1503%" height="15" fill="rgb(213,25,53)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="175.50"></text></g><g><title>__sysvec_apic_timer_interrupt (501,504 samples, 0.15%)</title><rect x="94.7443%" y="149" width="0.1503%" height="15" fill="rgb(252,105,26)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="159.50"></text></g><g><title>hrtimer_interrupt (501,504 samples, 0.15%)</title><rect x="94.7443%" y="133" width="0.1503%" height="15" fill="rgb(220,39,43)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="143.50"></text></g><g><title>__hrtimer_run_queues (501,504 samples, 0.15%)</title><rect x="94.7443%" y="117" width="0.1503%" height="15" fill="rgb(229,68,48)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="127.50"></text></g><g><title>tick_nohz_handler (501,504 samples, 0.15%)</title><rect x="94.7443%" y="101" width="0.1503%" height="15" fill="rgb(252,8,32)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="111.50"></text></g><g><title>update_process_times (501,504 samples, 0.15%)</title><rect x="94.7443%" y="85" width="0.1503%" height="15" fill="rgb(223,20,43)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="95.50"></text></g><g><title>sched_tick (501,504 samples, 0.15%)</title><rect x="94.7443%" y="69" width="0.1503%" height="15" fill="rgb(229,81,49)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="79.50"></text></g><g><title>psi_account_irqtime (501,504 samples, 0.15%)</title><rect x="94.7443%" y="53" width="0.1503%" height="15" fill="rgb(236,28,36)" fg:x="316212815" fg:w="501504"/><text x="94.9943%" y="63.50"></text></g><g><title>pty_write (160,563,501 samples, 48.11%)</title><rect x="47.2315%" y="229" width="48.1084%" height="15" fill="rgb(249,185,26)" fg:x="157636939" fg:w="160563501"/><text x="47.4815%" y="239.50">pty_write</text></g><g><title>tty_insert_flip_string_and_push_buffer (156,433,264 samples, 46.87%)</title><rect x="48.4690%" y="213" width="46.8708%" height="15" fill="rgb(249,174,33)" fg:x="161767176" fg:w="156433264"/><text x="48.7190%" y="223.50">tty_insert_flip_string_and_push_buffer</text></g><g><title>queue_work_on (130,237,992 samples, 39.02%)</title><rect x="56.3177%" y="197" width="39.0222%" height="15" fill="rgb(233,201,37)" fg:x="187962448" fg:w="130237992"/><text x="56.5677%" y="207.50">queue_work_on</text></g><g><title>clear_pending_if_disabled (1,486,121 samples, 0.45%)</title><rect x="94.8946%" y="181" width="0.4453%" height="15" fill="rgb(221,78,26)" fg:x="316714319" fg:w="1486121"/><text x="95.1446%" y="191.50"></text></g><g><title>pty_write_room (1,907,868 samples, 0.57%)</title><rect x="95.3399%" y="229" width="0.5716%" height="15" fill="rgb(250,127,30)" fg:x="318200440" fg:w="1907868"/><text x="95.5899%" y="239.50"></text></g><g><title>tty_buffer_space_avail (951,889 samples, 0.29%)</title><rect x="95.9115%" y="229" width="0.2852%" height="15" fill="rgb(230,49,44)" fg:x="320108308" fg:w="951889"/><text x="96.1615%" y="239.50"></text></g><g><title>__pick_next_task (2,576,666 samples, 0.77%)</title><rect x="96.1967%" y="165" width="0.7720%" height="15" fill="rgb(229,67,23)" fg:x="321060197" fg:w="2576666"/><text x="96.4467%" y="175.50"></text></g><g><title>dequeue_task (480,554 samples, 0.14%)</title><rect x="96.9687%" y="165" width="0.1440%" height="15" fill="rgb(249,83,47)" fg:x="323636863" fg:w="480554"/><text x="97.2187%" y="175.50"></text></g><g><title>update_entity_lag (998,947 samples, 0.30%)</title><rect x="97.1127%" y="117" width="0.2993%" height="15" fill="rgb(215,43,3)" fg:x="324117417" fg:w="998947"/><text x="97.3627%" y="127.50"></text></g><g><title>__calc_delta.constprop.0 (998,947 samples, 0.30%)</title><rect x="97.1127%" y="101" width="0.2993%" height="15" fill="rgb(238,154,13)" fg:x="324117417" fg:w="998947"/><text x="97.3627%" y="111.50"></text></g><g><title>dequeue_entity (2,132,575 samples, 0.64%)</title><rect x="97.1127%" y="133" width="0.6390%" height="15" fill="rgb(219,56,2)" fg:x="324117417" fg:w="2132575"/><text x="97.3627%" y="143.50"></text></g><g><title>vruntime_eligible (1,133,628 samples, 0.34%)</title><rect x="97.4120%" y="117" width="0.3397%" height="15" fill="rgb(233,0,4)" fg:x="325116364" fg:w="1133628"/><text x="97.6620%" y="127.50"></text></g><g><title>dequeue_task_fair (3,987,571 samples, 1.19%)</title><rect x="97.1127%" y="165" width="1.1948%" height="15" fill="rgb(235,30,7)" fg:x="324117417" fg:w="3987571"/><text x="97.3627%" y="175.50"></text></g><g><title>dequeue_entities (3,987,571 samples, 1.19%)</title><rect x="97.1127%" y="149" width="1.1948%" height="15" fill="rgb(250,79,13)" fg:x="324117417" fg:w="3987571"/><text x="97.3627%" y="159.50"></text></g><g><title>dl_server_stop (1,854,996 samples, 0.56%)</title><rect x="97.7517%" y="133" width="0.5558%" height="15" fill="rgb(211,146,34)" fg:x="326249992" fg:w="1854996"/><text x="98.0017%" y="143.50"></text></g><g><title>task_non_contending (1,854,996 samples, 0.56%)</title><rect x="97.7517%" y="117" width="0.5558%" height="15" fill="rgb(228,22,38)" fg:x="326249992" fg:w="1854996"/><text x="98.0017%" y="127.50"></text></g><g><title>hrtimer_active (1,854,996 samples, 0.56%)</title><rect x="97.7517%" y="101" width="0.5558%" height="15" fill="rgb(235,168,5)" fg:x="326249992" fg:w="1854996"/><text x="98.0017%" y="111.50"></text></g><g><title>finish_task_switch.isra.0 (2,282,425 samples, 0.68%)</title><rect x="98.3075%" y="165" width="0.6839%" height="15" fill="rgb(221,155,16)" fg:x="328104988" fg:w="2282425"/><text x="98.5575%" y="175.50"></text></g><g><title>__perf_event_task_sched_in (2,282,425 samples, 0.68%)</title><rect x="98.3075%" y="149" width="0.6839%" height="15" fill="rgb(215,215,53)" fg:x="328104988" fg:w="2282425"/><text x="98.5575%" y="159.50"></text></g><g><title>perf_ctx_enable (2,282,425 samples, 0.68%)</title><rect x="98.3075%" y="133" width="0.6839%" height="15" fill="rgb(223,4,10)" fg:x="328104988" fg:w="2282425"/><text x="98.5575%" y="143.50"></text></g><g><title>__intel_pmu_enable_all.isra.0 (2,282,425 samples, 0.68%)</title><rect x="98.3075%" y="117" width="0.6839%" height="15" fill="rgb(234,103,6)" fg:x="328104988" fg:w="2282425"/><text x="98.5575%" y="127.50"></text></g><g><title>native_write_msr (2,282,425 samples, 0.68%)</title><rect x="98.3075%" y="101" width="0.6839%" height="15" fill="rgb(227,97,0)" fg:x="328104988" fg:w="2282425"/><text x="98.5575%" y="111.50"></text></g><g><title>psi_account_irqtime (1,306,523 samples, 0.39%)</title><rect x="98.9913%" y="165" width="0.3915%" height="15" fill="rgb(234,150,53)" fg:x="330387413" fg:w="1306523"/><text x="99.2413%" y="175.50"></text></g><g><title>sched_clock_cpu (1,306,523 samples, 0.39%)</title><rect x="98.9913%" y="149" width="0.3915%" height="15" fill="rgb(228,201,54)" fg:x="330387413" fg:w="1306523"/><text x="99.2413%" y="159.50"></text></g><g><title>sched_clock (1,306,523 samples, 0.39%)</title><rect x="98.9913%" y="133" width="0.3915%" height="15" fill="rgb(222,22,37)" fg:x="330387413" fg:w="1306523"/><text x="99.2413%" y="143.50"></text></g><g><title>native_sched_clock (1,306,523 samples, 0.39%)</title><rect x="98.9913%" y="117" width="0.3915%" height="15" fill="rgb(237,53,32)" fg:x="330387413" fg:w="1306523"/><text x="99.2413%" y="127.50"></text></g><g><title>std::panic::catch_unwind (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="741" width="99.4567%" height="15" fill="rgb(233,25,53)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="725" width="99.4567%" height="15" fill="rgb(210,40,34)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="709" width="99.4567%" height="15" fill="rgb(241,220,44)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="693" width="99.4567%" height="15" fill="rgb(235,28,35)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="677" width="99.4567%" height="15" fill="rgb(210,56,17)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="661" width="99.4567%" height="15" fill="rgb(224,130,29)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="671.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="645" width="99.4567%" height="15" fill="rgb(235,212,8)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>rat::main (331,940,424 samples, 99.46%)</title><rect x="0.3005%" y="629" width="99.4567%" height="15" fill="rgb(223,33,50)" fg:x="1003008" fg:w="331940424"/><text x="0.5505%" y="639.50">rat::main</text></g><g><title>std::io::stdio::_print (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="613" width="95.7125%" height="15" fill="rgb(219,149,13)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="623.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="597" width="95.7125%" height="15" fill="rgb(250,156,29)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="607.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="581" width="95.7125%" height="15" fill="rgb(216,193,19)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="591.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="565" width="95.7125%" height="15" fill="rgb(216,135,14)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="575.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::Write::write_fmt (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="549" width="95.7125%" height="15" fill="rgb(241,47,5)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="559.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="533" width="95.7125%" height="15" fill="rgb(233,42,35)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="543.50">core::fmt::write</text></g><g><title>core::fmt::rt::Argument::fmt (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="517" width="95.7125%" height="15" fill="rgb(231,13,6)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="527.50">core::fmt::rt::Argument::fmt</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="501" width="95.7125%" height="15" fill="rgb(207,181,40)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="511.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="485" width="95.7125%" height="15" fill="rgb(254,173,49)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="495.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="469" width="95.7125%" height="15" fill="rgb(221,1,38)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="479.50">&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="453" width="95.7125%" height="15" fill="rgb(206,124,46)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="463.50">&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="437" width="95.7125%" height="15" fill="rgb(249,21,11)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="447.50">&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all</text></g><g><title>std::io::Write::write_all (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="421" width="95.7125%" height="15" fill="rgb(222,201,40)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="431.50">std::io::Write::write_all</text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="405" width="95.7125%" height="15" fill="rgb(235,61,29)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="415.50">&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="389" width="95.7125%" height="15" fill="rgb(219,207,3)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="399.50">std::sys::pal::unix::fd::FileDesc::write</text></g><g><title>write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="373" width="95.7125%" height="15" fill="rgb(222,56,46)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="383.50">write</text></g><g><title>[libc.so.6] (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="357" width="95.7125%" height="15" fill="rgb(239,76,54)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="367.50">[libc.so.6]</text></g><g><title>[libc.so.6] (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="341" width="95.7125%" height="15" fill="rgb(231,124,27)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="351.50">[libc.so.6]</text></g><g><title>entry_SYSCALL_64 (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="325" width="95.7125%" height="15" fill="rgb(249,195,6)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="335.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="309" width="95.7125%" height="15" fill="rgb(237,174,47)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="319.50">do_syscall_64</text></g><g><title>ksys_write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="293" width="95.7125%" height="15" fill="rgb(206,201,31)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="303.50">ksys_write</text></g><g><title>vfs_write (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="277" width="95.7125%" height="15" fill="rgb(231,57,52)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="287.50">vfs_write</text></g><g><title>file_tty_write.isra.0 (319,444,008 samples, 95.71%)</title><rect x="4.0447%" y="261" width="95.7125%" height="15" fill="rgb(248,177,22)" fg:x="13499424" fg:w="319444008"/><text x="4.2947%" y="271.50">file_tty_write.isra.0</text></g><g><title>n_tty_write (314,134,148 samples, 94.12%)</title><rect x="5.6357%" y="245" width="94.1215%" height="15" fill="rgb(215,211,37)" fg:x="18809284" fg:w="314134148"/><text x="5.8857%" y="255.50">n_tty_write</text></g><g><title>wait_woken (11,883,235 samples, 3.56%)</title><rect x="96.1967%" y="229" width="3.5605%" height="15" fill="rgb(241,128,51)" fg:x="321060197" fg:w="11883235"/><text x="96.4467%" y="239.50">wait..</text></g><g><title>schedule_timeout (11,883,235 samples, 3.56%)</title><rect x="96.1967%" y="213" width="3.5605%" height="15" fill="rgb(227,165,31)" fg:x="321060197" fg:w="11883235"/><text x="96.4467%" y="223.50">sche..</text></g><g><title>schedule (11,883,235 samples, 3.56%)</title><rect x="96.1967%" y="197" width="3.5605%" height="15" fill="rgb(228,167,24)" fg:x="321060197" fg:w="11883235"/><text x="96.4467%" y="207.50">sche..</text></g><g><title>__schedule (11,883,235 samples, 3.56%)</title><rect x="96.1967%" y="181" width="3.5605%" height="15" fill="rgb(228,143,12)" fg:x="321060197" fg:w="11883235"/><text x="96.4467%" y="191.50">__sc..</text></g><g><title>psi_task_switch (1,249,496 samples, 0.37%)</title><rect x="99.3828%" y="165" width="0.3744%" height="15" fill="rgb(249,149,8)" fg:x="331693936" fg:w="1249496"/><text x="99.6328%" y="175.50"></text></g><g><title>psi_group_change (1,249,496 samples, 0.37%)</title><rect x="99.3828%" y="149" width="0.3744%" height="15" fill="rgb(243,35,44)" fg:x="331693936" fg:w="1249496"/><text x="99.6328%" y="159.50"></text></g><g><title>all (333,753,853 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="333753853"/><text x="0.2500%" y="927.50"></text></g><g><title>rat (333,753,853 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="333753853"/><text x="0.2500%" y="911.50">rat</text></g><g><title>_start (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="885" width="99.6995%" height="15" fill="rgb(233,141,41)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="895.50">_start</text></g><g><title>__libc_start_main (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="869" width="99.6995%" height="15" fill="rgb(239,167,4)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="853" width="99.6995%" height="15" fill="rgb(209,217,16)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="863.50">[libc.so.6]</text></g><g><title>main (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="837" width="99.6995%" height="15" fill="rgb(219,88,35)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="821" width="99.6995%" height="15" fill="rgb(220,193,23)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="805" width="99.6995%" height="15" fill="rgb(230,90,52)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="789" width="99.6995%" height="15" fill="rgb(252,106,19)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="773" width="99.6995%" height="15" fill="rgb(206,74,20)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (332,750,845 samples, 99.70%)</title><rect x="0.3005%" y="757" width="99.6995%" height="15" fill="rgb(230,138,44)" fg:x="1003008" fg:w="332750845"/><text x="0.5505%" y="767.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::init (810,421 samples, 0.24%)</title><rect x="99.7572%" y="741" width="0.2428%" height="15" fill="rgb(235,182,43)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="751.50"></text></g><g><title>std::sys::pal::unix::init (810,421 samples, 0.24%)</title><rect x="99.7572%" y="725" width="0.2428%" height="15" fill="rgb(242,16,51)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="735.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (810,421 samples, 0.24%)</title><rect x="99.7572%" y="709" width="0.2428%" height="15" fill="rgb(248,9,4)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="719.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (810,421 samples, 0.24%)</title><rect x="99.7572%" y="693" width="0.2428%" height="15" fill="rgb(210,31,22)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="703.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (810,421 samples, 0.24%)</title><rect x="99.7572%" y="677" width="0.2428%" height="15" fill="rgb(239,54,39)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="687.50"></text></g><g><title>__mmap (810,421 samples, 0.24%)</title><rect x="99.7572%" y="661" width="0.2428%" height="15" fill="rgb(230,99,41)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (810,421 samples, 0.24%)</title><rect x="99.7572%" y="645" width="0.2428%" height="15" fill="rgb(253,106,12)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="655.50"></text></g><g><title>do_syscall_64 (810,421 samples, 0.24%)</title><rect x="99.7572%" y="629" width="0.2428%" height="15" fill="rgb(213,46,41)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="639.50"></text></g><g><title>vm_mmap_pgoff (810,421 samples, 0.24%)</title><rect x="99.7572%" y="613" width="0.2428%" height="15" fill="rgb(215,133,35)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="623.50"></text></g><g><title>do_mmap (810,421 samples, 0.24%)</title><rect x="99.7572%" y="597" width="0.2428%" height="15" fill="rgb(213,28,5)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="607.50"></text></g><g><title>__mmap_region (810,421 samples, 0.24%)</title><rect x="99.7572%" y="581" width="0.2428%" height="15" fill="rgb(215,77,49)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="591.50"></text></g><g><title>mas_store_prealloc (810,421 samples, 0.24%)</title><rect x="99.7572%" y="565" width="0.2428%" height="15" fill="rgb(248,100,22)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="575.50"></text></g><g><title>mas_wr_node_store (810,421 samples, 0.24%)</title><rect x="99.7572%" y="549" width="0.2428%" height="15" fill="rgb(208,67,9)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="559.50"></text></g><g><title>mas_pop_node (810,421 samples, 0.24%)</title><rect x="99.7572%" y="533" width="0.2428%" height="15" fill="rgb(219,133,21)" fg:x="332943432" fg:w="810421"/><text x="100.0072%" y="543.50"></text></g></svg></svg>